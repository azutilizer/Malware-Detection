import os
import json
import datetime
import base64
import uuid
import shutil
from mimetypes import MimeTypes

import requests
from flask import make_response, request, jsonify
from flask_restful import Resource, reqparse, inputs
from predict import test

UPLOAD_DIR = 'uploads'
os.makedirs(UPLOAD_DIR, exist_ok=True)


class CustomException(Exception):
    pass


class StillProcessing(Exception):
    pass


class MalwareDetect(Resource):

    def __init__(self):
        self.session = requests.Session()
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) '
                          'Chrome/74.0.3729.169 Safari/537.36',
        }
        self.user_data = None
        self.device_id = uuid.uuid4().hex
        self.uuid = uuid.uuid4().hex
        self.mime = MimeTypes()
        current_time = int(datetime.datetime.utcnow().timestamp())
        self.upload_filename = f'{current_time}.json'
        self.response = {'malware': '', 'confidence': 0.0}

    def post(self):
        is_parse = request.is_json
        if not is_parse:
            response = json.dumps({
                'message': 'Arguments parsing is failed.'
            })
            return make_response(response, 404)

        content = request.get_json()
        base64_text = content['vt']
        if base64_text is None:
            print('JSON is None.')
            return 'JSON Uploading Error!'

        encoded_text = base64_text.split(',')[-1]
        text_buf = base64.b64decode(encoded_text)

        if len(text_buf) == 0:
            response = json.dumps({
                'message': 'Failed.'
            })
            return make_response(response, 503)

        tmp_text_file = os.path.join(UPLOAD_DIR, 'upload_' + datetime.datetime.now().strftime("%Y%m%d%H%M%S") + '.json')

        print('writing json file: {}'.format(tmp_text_file))
        with open(tmp_text_file, 'wb') as f:
            f.write(text_buf)

        try:
            pred = test(tmp_text_file)
            result = {'message': "Malware: {}, confidence: {:.3f}".format(pred[0], pred[1])}
            response = json.dumps(result)
        except:
            response = json.dumps({
                'message': 'Failed to send.'
            })
            return make_response(response, 503)
        print(response)
        return make_response(response, 200)
